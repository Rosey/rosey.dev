{"version":3,"sources":["Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["preventDefault","e","Toolbar","props","toggleInlineStyle","bind","toggleBlockType","event","style","currentTarget","getAttribute","this","block","value","className","RichUtils","getCurrentBlockType","editorState","type","key","data-block","onClick","onMouseDown","getCurrentInlineStyle","has","data-style","map","button","renderInlineStyleButton","renderBlockButton","React","Component","keyBindingFunction","KeyBindingUtil","hasCommandModifier","shiftKey","getDefaultKeyBinding","styleMap","App","state","EditorState","createEmpty","onChange","handleKeyCommand","setState","command","contentState","getCurrentContent","showPlaceholder","hasText","getBlockMap","first","getType","placeholderClass","customStyleMap","placeholder","keyBindingFn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a4f78fc.chunk.js","sourcesContent":["import React from 'react';\nimport { RichUtils } from 'draft-js';\nimport './Toolbar.css';\n\nfunction preventDefault(e) {\n  e.preventDefault();\n}\n\nclass Toolbar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleInlineStyle = this.toggleInlineStyle.bind(this);\n    this.toggleBlockType = this.toggleBlockType.bind(this);\n  }\n\n  toggleInlineStyle (event) {\n    event.preventDefault();\n    let style = event.currentTarget.getAttribute('data-style');\n    this.props.toggleInlineStyle(style);\n  }\n\n  toggleBlockType (event) {\n    event.preventDefault();\n    let block = event.currentTarget.getAttribute('data-block');\n    this.props.toggleBlockType(block);\n  }\n\n  renderBlockButton(value, block) {\n    const currentBlockType = RichUtils.getCurrentBlockType(this.props.editorState);\n    let className = '';\n    if (currentBlockType === block) {\n      className = 'active';\n    }\n\n    return (\n      <input\n        type=\"button\"\n        key={block}\n        value={value}\n        className={className}\n        data-block={block}\n        onClick={this.toggleBlockType}\n        onMouseDown={preventDefault}\n      />\n    );\n  }\n\n  renderInlineStyleButton(value, style) {\n    const currentInlineStyle = this.props.editorState.getCurrentInlineStyle();\n    let className = '';\n    if (currentInlineStyle.has(style)) {\n      className = 'active';\n    }\n\n    return (\n      <input\n        type=\"button\"\n        key={style}\n        value={value}\n        className={className}\n        data-style={style}\n        onClick={this.toggleInlineStyle}\n        onMouseDown={preventDefault}\n      />\n    );\n  }\n\n  render() {\n    const inlineStyleButtons = [\n      {\n        value: 'Bold',\n        style: 'BOLD'\n      },\n\n      {\n        value: 'Italic',\n        style: 'ITALIC'\n      },\n\n      {\n        value: 'Underline',\n        style: 'UNDERLINE'\n      },\n\n      {\n        value: 'Strikethrough',\n        style: 'STRIKETHROUGH'\n      },\n\n      {\n        value: 'Code',\n        style: 'CODE'\n      },\n\n      {\n        value: 'Highlight',\n        style: 'HIGHLIGHT'\n      }\n    ];\n\n    const blockTypeButtons = [\n      {\n        value: 'Heading One',\n        block: 'header-one'\n      },\n\n      {\n        value: 'Heading Two',\n        block: 'header-two'\n      },\n\n      {\n        value: 'Heading Three',\n        block: 'header-three'\n      },\n\n      {\n        value: 'Blockquote',\n        block: 'blockquote'\n      },\n\n      {\n        value: 'Unordered List',\n        block: 'unordered-list-item'\n      },\n\n      {\n        value: 'Ordered List',\n        block: 'ordered-list-item'\n      }\n    ];\n\n    return (\n      <div className=\"toolbar\">\n        <div className=\"inline-style-options\">\n          <h2 className=\"toolbar-title\">Inline styles:</h2>\n          {inlineStyleButtons.map((button) => {\n            return this.renderInlineStyleButton(button.value, button.style);\n          })}\n        </div>\n\n        <div className=\"block-style-options\">\n        <h2 className=\"toolbar-title\">Block types:</h2>\n          {blockTypeButtons.map((button) => {\n            return this.renderBlockButton(button.value, button.block);\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar;\n","import React from 'react';\nimport './App.css';\nimport Toolbar from './Toolbar';\nimport { Editor, EditorState, RichUtils, getDefaultKeyBinding, KeyBindingUtil } from 'draft-js';\n\nfunction keyBindingFunction(event) {\n  if (KeyBindingUtil.hasCommandModifier(event) && event.shiftKey && event.key === 'x') {\n    return 'strikethrough';\n  }\n\n  if (KeyBindingUtil.hasCommandModifier(event) && event.shiftKey && event.key === '7') {\n    return 'ordered-list';\n  }\n\n  if (KeyBindingUtil.hasCommandModifier(event) && event.shiftKey && event.key === '8') {\n    return 'unordered-list';\n  }\n\n  if (KeyBindingUtil.hasCommandModifier(event) && event.shiftKey && event.key === '9') {\n    return 'blockquote';\n  }\n\n  if (KeyBindingUtil.hasCommandModifier(event) && event.shiftKey && event.key === 'h') {\n    return 'highlight';\n  }\n\n  return getDefaultKeyBinding(event);\n}\n\nconst styleMap = {\n  'HIGHLIGHT': {\n    'backgroundColor': '#faed27',\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty()\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n    this.toggleInlineStyle = this.toggleInlineStyle.bind(this);\n    this.toggleBlockType = this.toggleBlockType.bind(this);\n  }\n\n  onChange (editorState) {\n    this.setState({editorState});\n  }\n\n  handleKeyCommand(command) {\n    // inline formatting key commands handles bold, italic, code, underline\n    var editorState = RichUtils.handleKeyCommand(this.state.editorState, command);\n\n    if (!editorState && command === 'strikethrough') {\n      editorState = RichUtils.toggleInlineStyle(this.state.editorState, 'STRIKETHROUGH');\n    }\n\n    if (!editorState && command === 'highlight') {\n      editorState = RichUtils.toggleInlineStyle(this.state.editorState, 'HIGHLIGHT');\n    }\n\n    if (!editorState && command === 'blockquote') {\n      editorState = RichUtils.toggleBlockType(this.state.editorState, 'blockquote');\n    }\n\n    if (!editorState && command === 'ordered-list') {\n      editorState = RichUtils.toggleBlockType(this.state.editorState, 'ordered-list-item');\n    }\n\n    if (!editorState && command === 'unordered-list') {\n      editorState = RichUtils.toggleBlockType(this.state.editorState, 'unordered-list-item');\n    }\n\n    if (editorState) {\n      this.setState({editorState});\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  toggleInlineStyle (style) {\n    this.setState({\n      editorState: RichUtils.toggleInlineStyle(this.state.editorState, style)\n    });\n  }\n\n  toggleBlockType (block) {\n    this.setState({\n      editorState: RichUtils.toggleBlockType(this.state.editorState, block)\n    });\n  }\n\n  render() {\n    const contentState = this.state.editorState.getCurrentContent();\n    let showPlaceholder = false;\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() === 'unstyled') {\n        showPlaceholder = true;\n      }\n    }\n\n    const placeholderClass = showPlaceholder ? 'show-placeholder' : 'hide-placeholder';\n\n    return (\n      <div className={`my-little-app ${placeholderClass}`}>\n        <h1>Playing with Draft!</h1>\n        <Toolbar\n          editorState={this.state.editorState}\n          toggleBlockType={this.toggleBlockType}\n          toggleInlineStyle={this.toggleInlineStyle}\n        />\n        <div className=\"draft-editor-wrapper\">\n          <Editor\n            customStyleMap={styleMap}\n            placeholder={\"Start typing!\"}\n            editorState={this.state.editorState}\n            onChange={this.onChange}\n            handleKeyCommand={this.handleKeyCommand}\n            keyBindingFn={keyBindingFunction}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}